import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix

# Step 1: Create a random fake news dataset
np.random.seed(42)
n_samples = 500

# Simulate features
data = pd.DataFrame({
    'sentiment_score': np.random.uniform(-1, 1, n_samples),
    'word_count': np.random.randint(100, 2000, n_samples),
    'char_count': np.random.randint(500, 10000, n_samples),
    'has_images': np.random.randint(0, 2, n_samples),
    'has_videos': np.random.randint(0, 2, n_samples),
    'readability_score': np.random.uniform(20, 80, n_samples),
    'num_shares': np.random.randint(0, 50000, n_samples),
    'num_comments': np.random.randint(0, 1000, n_samples),
    'fact_check_rating': np.random.choice(['FALSE', 'TRUE', 'Mixed'], n_samples),
    'is_satirical': np.random.randint(0, 2, n_samples)
})

# Step 2: Create binary target variable
data['label'] = ((data['fact_check_rating'] == 'FALSE') | (data['is_satirical'] == 1)).astype(int)

# Step 3: Plot before classification
plt.figure(figsize=(6,4))
data['label'].value_counts().plot(kind='bar', color=['green', 'red'])
plt.title("Before Classification: Fake (1) vs Real (0)")
plt.xticks([0, 1], ['Real', 'Fake'], rotation=0)
plt.ylabel("Count")
plt.tight_layout()
plt.show()

# Step 4: Model training
features = ['sentiment_score', 'word_count', 'char_count', 'has_images', 'has_videos',
            'readability_score', 'num_shares', 'num_comments']
X = data[features]
y = data['label']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Step 5: Predictions
y_pred = model.predict(X_test)

# Step 6: Evaluation output
report = classification_report(y_test, y_pred, output_dict=True)
conf_matrix = confusion_matrix(y_test, y_pred)

# Step 7: Plot after classification
plt.figure(figsize=(6,4))
pd.Series(y_pred).value_counts().plot(kind='bar', color=['green', 'red'])
plt.title("After Classification: Predicted Fake (1) vs Real (0)")
plt.xticks([0, 1], ['Real', 'Fake'], rotation=0)
plt.ylabel("Count")
plt.tight_layout()
plt.show()

# Show classification report and confusion matrix
report, conf_matrix